name: Docker Image CI

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Docker Buildx (for multi-platform builds)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in to Docker Hub using the secrets
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get latest release version
        id: get_version
        run: |
          PREVIOUS_VERSION=$(curl --silent "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r .tag_name) || PREVIOUS_VERSION=null
          if [ "$PREVIOUS_VERSION" == "null" ]; then PREVIOUS_VERSION=1.0.0; fi
          echo "Previous version was $PREVIOUS_VERSION"
          echo "PREVIOUS_VERSION=$PREVIOUS_VERSION" >> $GITHUB_ENV
          curl -o prev-software-list.txt https://github.com/${{ github.repository }}/releases/download/$PREVIOUS_VERSION/software-list.txt || touch prev-software-list.txt
          PREV_SOFTWARE_LIST_HASH=$(sha256sum ./prev-software-list.txt | awk '{ print $1 }')
          echo "PREV_SOFTWARE_LIST_HASH=$PREV_SOFTWARE_LIST_HASH" >> $GITHUB_ENV
          echo "Previous hash of the software list file: $PREV_SOFTWARE_LIST_HASH"

      - name: Increment version
        id: increment_version
        run: |
          IFS='.' read -r major minor patch <<< "${{ env.PREVIOUS_VERSION }}"
          patch=$((patch + 1))  # Increment patch version
          NEW_VERSION="$major.$minor.$patch"
          echo "New version will be $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      # Build and push the Docker image for both amd64 and arm64 platforms
      - name: Build and Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          platforms: linux/amd64,linux/arm64
          build-args: |
            DOCKER_IMAGE_BUILD_VERSION=${{ env.NEW_VERSION }}
          tags: ${{ vars.DOCKER_IMAGE }}:${{ env.NEW_VERSION }}

      # Pull and extract file from current Docker image
      - name: Pull and Extract Software List from the Docker Image
        run: |
          IMAGE=${{ vars.DOCKER_IMAGE }}:${{ env.NEW_VERSION }}
          echo "Pulling Docker image: $IMAGE"
          docker pull $IMAGE
          # Create a container from the image but don't start it
          CONTAINER_ID=$(docker create $IMAGE)
          # Copy the file from the container to the host system
          docker cp $CONTAINER_ID:/usr/local/jddlab/software-list.txt ./software-list.txt
          # Remove the temporary container
          docker rm $CONTAINER_ID
          # Calculate the hash of the extracted file
          SOFTWARE_LIST_HASH=$(sha256sum ./software-list.txt | awk '{ print $1 }')
          echo "Current hash of the software list file: $SOFTWARE_LIST_HASH"
          echo "SOFTWARE_LIST_HASH=$SOFTWARE_LIST_HASH" >> $GITHUB_ENV

      - name: Push docker image
        run: |
          echo "Pushing docker image"
          docker push ${{ vars.DOCKER_IMAGE }}:${{ env.NEW_VERSION }}

      # Create a GitHub release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.NEW_VERSION }}
          release_name: Release ${{ env.NEW_VERSION }}
          body: |
            This release includes (**jddlab** docker image version ${{ env.NEW_VERSION }})[https://hub.docker.com/repository/docker/${{ vars.DOCKER_IMAGE }}/tags?name=${{ env.NEW_VERSION }}].  
            You can run it with: `docker run -it --rm -v "$PWD:/work" ${{ vars.DOCKER_IMAGE }}:${{ env.NEW_VERSION }} apktool -h` command.
            You can pull it from Docker Hub: `docker pull ${{ vars.DOCKER_IMAGE }}:${{ env.NEW_VERSION }}`.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Automatically provided by GitHub

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}  # Upload URL from create_release step
          asset_path: ./software-list.txt  # Path to the file you want to upload
          asset_name: software-list.txt    # Name of the asset as it will appear on GitHub
          asset_content_type: application/octet-stream  # Content type of the asset
       env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Use the token to authenticate

      # Tag the image as 'latest'
      - name: Tag Docker image as latest
        run: |
          echo "Tagging image as latest"
          docker tag ${{ vars.DOCKER_IMAGE }}:${{ env.NEW_VERSION }} ${{ vars.DOCKER_IMAGE }}:latest
          docker push ${{ vars.DOCKER_IMAGE }}:latest

      # Log out of Docker Hub
      - name: Log out of Docker Hub
        run: docker logout